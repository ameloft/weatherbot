import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes,
    filters, CallbackQueryHandler, JobQueue # JobQueue –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
)
import matplotlib.pyplot as plt
import io # –î–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–π—Ç–æ–≤–∏–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏ (–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –≤ –ø–∞–º'—è—Ç—å)
import datetime # –î–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞—Ç–∞–º–∏ —Ç–∞ —á–∞—Å–æ–º

# –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
API_TOKEN = "6240970287:AAGKU4lDb85qG1JN0jLwtDiGgni1q8MuMhw"

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–æ–∫ (–ü–†–û–°–¢–ê –î–ï–ú–û–ù–°–¢–†–ê–¶–Ü–Ø, –ù–ï –î–õ–Ø –ü–†–û–î–ê–ö–®–ù–£)
# –§–æ—Ä–º–∞—Ç: {user_id: {"lat": float, "lon": float, "city_name": str, "notification_time": "HH:MM"}}
# –£ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–∏—Ö!
user_subscriptions = {}


def weather_code_to_text(code):
    codes = {
        0: "—è—Å–Ω–æ",
        1: "–ø–µ—Ä–µ–≤–∞–∂–Ω–æ —è—Å–Ω–æ",
        2: "–ø–µ—Ä–µ–≤–∞–∂–Ω–æ —Ö–º–∞—Ä–Ω–æ",
        3: "—Ö–º–∞—Ä–Ω–æ",
        45: "—Ç—É–º–∞–Ω",
        48: "–º–æ—Ä–æ–∑–Ω–∞ —ñ–º–ª–∞",
        51: "–¥—Ä—ñ–±–Ω–∏–π –¥–æ—â",
        53: "–ø–æ–º—ñ—Ä–Ω–∏–π –¥–æ—â",
        55: "—Å–∏–ª—å–Ω–∏–π –¥—Ä—ñ–±–Ω–∏–π –¥–æ—â",
        61: "–Ω–µ–≤–µ–ª–∏–∫–∏–π –¥–æ—â",
        63: "–ø–æ–º—ñ—Ä–Ω–∏–π –¥–æ—â",
        65: "—Å–∏–ª—å–Ω–∏–π –¥–æ—â",
        71: "–Ω–µ–≤–µ–ª–∏–∫–∏–π —Å–Ω—ñ–≥",
        73: "–ø–æ–º—ñ—Ä–Ω–∏–π —Å–Ω—ñ–≥",
        75: "—Å–∏–ª—å–Ω–∏–π —Å–Ω—ñ–≥",
        80: "–¥–æ—â–æ–≤—ñ –∑–ª–∏–≤–∏",
        81: "—Å–∏–ª—å–Ω—ñ –¥–æ—â—ñ",
        82: "—ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ –∑–ª–∏–≤–∏",
        95: "–≥—Ä–æ–∑–∞",
        99: "—Å–∏–ª—å–Ω–∞ –≥—Ä–æ–∑–∞"
    }
    return codes.get(code, "–Ω–µ–≤—ñ–¥–æ–º–æ")

def get_coordinates(city_name):
    url = f"https://nominatim.openstreetmap.org/search?q={city_name}&format=json"
    headers = {"User-Agent": "WeatherBot/1.0"} # –ó–∞–≤–∂–¥–∏ –¥–æ–¥–∞–≤–∞–π—Ç–µ User-Agent
    try:
        resp = requests.get(url, headers=headers)
        resp.raise_for_status() # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–º–∏–ª–∫–∏ HTTP
        data = resp.json()
        if data:
            return float(data[0]["lat"]), float(data[0]["lon"])
    except requests.exceptions.RequestException as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ Nominatim: {e}")
    except ValueError:
        logging.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏.")
    return None, None

def get_weather_current(lat, lon):
    url = "https://api.open-meteo.com/v1/forecast"
    params = {
        "latitude": lat, "longitude": lon,
        "current_weather": True,
        "timezone": "auto"
    }
    try:
        resp = requests.get(url, params=params)
        resp.raise_for_status()
        data = resp.json()
        if "current_weather" in data:
            current = data["current_weather"]
            temperature = current["temperature"]
            windspeed = current["windspeed"]
            weathercode = current["weathercode"]
            
            weather_desc = weather_code_to_text(weathercode)
            
            msg = (
                f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n"
                f"üí® –®–≤–∏–¥–∫—ñ—Å—Ç—å –≤—ñ—Ç—Ä—É: {windspeed} –º/—Å\n"
                f"‚òÅÔ∏è –û–ø–∏—Å: {weather_desc}"
            )
            return msg
    except requests.exceptions.RequestException as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏: {e}")
    return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É."

# –û–ù–û–í–õ–ï–ù–ê –§–£–ù–ö–¶–Ü–Ø: get_weather_forecast —Ç–µ–ø–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î –¥–µ—Ç–∞–ª—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è
def get_weather_forecast(lat, lon):
    url = "https://api.open-meteo.com/v1/forecast"
    params = {
        "latitude": lat, "longitude": lon,
        "daily": "weathercode,temperature_2m_max,temperature_2m_min",
        "hourly": "temperature_2m,weathercode,precipitation_probability", # –í–∫–ª—é—á–∞—î–º–æ –ø–æ–≥–æ–¥–∏–Ω–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –≤—Å—ñ—Ö –¥–Ω—ñ–≤
        "forecast_days": 3,
        "timezone": "auto"
    }
    try:
        resp = requests.get(url, params=params)
        resp.raise_for_status()
        data = resp.json()
        daily_data = data.get("daily", {})
        hourly_data = data.get("hourly", {})

        daily_times = daily_data.get("time", [])
        daily_max_temps = daily_data.get("temperature_2m_max", [])
        daily_min_temps = daily_data.get("temperature_2m_min", [])
        daily_codes = daily_data.get("weathercode", [])

        if not daily_times:
            return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—ñ.", {}

        forecast_details = {} # –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –ø–æ –¥–Ω—è—Ö

        # –¶–ò–ö–õ –ü–û DAILY_TIMES, —è–∫–∏–π –±—É–≤ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –≤–∞—à–æ–º—É –ø–æ—á–∞—Ç–∫–æ–≤–æ–º—É –∫–æ–¥—ñ
        for i in range(len(daily_times)):
            date_str = daily_times[i]
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
            date_obj = datetime.datetime.fromisoformat(date_str)
            day_name = date_obj.strftime("%A, %d.%m")
            # –õ–æ–∫–∞–ª—ñ–∑—É—î–º–æ –¥–Ω—ñ —Ç–∏–∂–Ω—è (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ –º–æ–≤)
            day_name = day_name.replace("Monday", "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫").replace("Tuesday", "–í—ñ–≤—Ç–æ—Ä–æ–∫").replace("Wednesday", "–°–µ—Ä–µ–¥–∞").replace("Thursday", "–ß–µ—Ç–≤–µ—Ä").replace("Friday", "–ü'—è—Ç–Ω–∏—Ü—è").replace("Saturday", "–°—É–±–æ—Ç–∞").replace("Sunday", "–ù–µ–¥—ñ–ª—è")
            
            day_text = weather_code_to_text(daily_codes[i])
            max_temp = daily_max_temps[i]
            min_temp = daily_min_temps[i]

            # –ó–±–∏—Ä–∞—î–º–æ –ø–æ–≥–æ–¥–∏–Ω–Ω—ñ –¥–∞–Ω—ñ, —â–æ –Ω–∞–ª–µ–∂–∞—Ç—å –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –¥–Ω—è
            hourly_forecast_for_day = {
                "times": [],
                "temps": [],
                "codes": [],
                "prec_probs": []
            }
            
            for j in range(len(hourly_data.get("time", []))):
                hourly_time_str = hourly_data["time"][j]
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–≥–æ–¥–∏–Ω–Ω–∏–π —á–∞—Å –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏
                if hourly_time_str.startswith(date_str):
                    hourly_forecast_for_day["times"].append(hourly_time_str)
                    hourly_forecast_for_day["temps"].append(hourly_data["temperature_2m"][j])
                    hourly_forecast_for_day["codes"].append(hourly_data["weathercode"][j])
                    hourly_forecast_for_day["prec_probs"].append(hourly_data["precipitation_probability"][j])
            
            forecast_details[date_str] = { # –ö–ª—é—á - ISO –¥–∞—Ç–∞, —â–æ–± –ø–æ—Ç—ñ–º –ª–µ–≥–∫–æ –¥—ñ—Å—Ç–∞—Ç–∏
                "summary": f"{day_name}: {day_text}, –≤—ñ–¥ {min_temp}¬∞C –¥–æ {max_temp}¬∞C",
                "hourly_data": hourly_forecast_for_day
            }
        
        # –°—Ñ–æ—Ä–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—ñ –¥–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è
        initial_message = "–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ 3 –¥–Ω—ñ:\n"
        for date_str, details in forecast_details.items():
            initial_message += f"- {details['summary']}\n"

        return initial_message, forecast_details # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ —Ç–µ–∫—Å—Ç, —ñ –¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
    except requests.exceptions.RequestException as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ 3 –¥–Ω—ñ: {e}")
    return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—ñ.", {}

# –ê–î–ê–ü–¢–û–í–ê–ù–ê –§–£–ù–ö–¶–Ü–Ø: get_weather_hourly —Ç–µ–ø–µ—Ä –ø—Ä–∏–π–º–∞—î –≤–∂–µ –≥–æ—Ç–æ–≤—ñ –¥–∞–Ω—ñ
def get_weather_hourly(hourly_data_for_day):
    times_raw = hourly_data_for_day.get("times", [])
    temps = hourly_data_for_day.get("temps", [])
    codes = hourly_data_for_day.get("codes", [])
    prec_probs = hourly_data_for_day.get("prec_probs", [])

    if times_raw and temps and codes and prec_probs:
        msg = "–ü–æ–≥–æ–¥–∏–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑:\n"
        plot_times = []
        plot_temps = []
        plot_prec_probs = []

        for i in range(len(times_raw)):
            hour_str = times_raw[i][11:16] # "YYYY-MM-DDTHH:MM" -> "HH:MM"
            day_desc = weather_code_to_text(codes[i])
            msg += (f"{hour_str}: {day_desc}, {temps[i]}¬∞C, "
                    f"–æ–ø–∞–¥–∏: {prec_probs[i]}%\n")

            plot_times.append(datetime.datetime.fromisoformat(times_raw[i]))
            plot_temps.append(temps[i])
            plot_prec_probs.append(prec_probs[i])

        return msg, plot_times, plot_temps, plot_prec_probs
    return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥–∏–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è.", None, None, None

# –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≥—Ä–∞—Ñ—ñ–∫–∞
def generate_hourly_weather_plot(times, temps, prec_probs):
    if not times or not temps or not prec_probs:
        return None

    fig, ax1 = plt.subplots(figsize=(12, 7)) # –ó–±—ñ–ª—å—à–µ–Ω–æ —Ä–æ–∑–º—ñ—Ä –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ

    # –ì—Ä–∞—Ñ—ñ–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
    ax1.plot(times, temps, 'r-', marker='o', label='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)')
    ax1.set_xlabel('–ß–∞—Å')
    ax1.set_ylabel('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)', color='red')
    ax1.tick_params(axis='y', labelcolor='red')
    ax1.grid(True, linestyle='--', alpha=0.7) # –î–æ–¥–∞–Ω–æ —Å—Ç–∏–ª—å —Å—ñ—Ç–∫–∏
    ax1.set_title('–ü–æ–≥–æ–¥–∏–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ —Ç–∞ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –æ–ø–∞–¥—ñ–≤')

    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –æ—Å—ñ X –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥–æ–¥–∏–Ω
    ax1.xaxis.set_major_locator(plt.matplotlib.dates.HourLocator(interval=3)) # –ú—ñ—Ç–∫–∏ –∫–æ–∂–Ω—ñ 3 –≥–æ–¥–∏–Ω–∏
    ax1.xaxis.set_major_formatter(plt.matplotlib.dates.DateFormatter('%H:%M'))
    fig.autofmt_xdate() # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –Ω–∞—Ö–∏–ª–µ–Ω–Ω—è –º—ñ—Ç–æ–∫ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –ø–µ—Ä–µ–∫—Ä–∏—Ç—Ç—è

    # –ì—Ä–∞—Ñ—ñ–∫ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –æ–ø–∞–¥—ñ–≤ (–Ω–∞ –¥—Ä—É–≥—ñ–π –æ—Å—ñ Y)
    ax2 = ax1.twinx()
    ax2.bar(times, prec_probs, color='blue', alpha=0.3, width=0.04, label='–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ (%)')
    ax2.set_ylabel('–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤ (%)', color='blue')
    ax2.tick_params(axis='y', labelcolor='blue')
    ax2.set_ylim(0, 100) # –ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤—ñ–¥ 0 –¥–æ 100%

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ª–µ–≥–µ–Ω–¥
    lines, labels = ax1.get_legend_handles_labels()
    bars, bar_labels = ax2.get_legend_handles_labels()
    ax2.legend(lines + bars, labels + bar_labels, loc='upper left')

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ —É –±–∞–π—Ç–æ–≤–∏–π –ø–æ—Ç—ñ–∫
    buf = io.BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close(fig) # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Ñ—ñ–≥—É—Ä—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –≤–∏—Ç–æ–∫—ñ–≤ –ø–∞–º'—è—Ç—ñ
    return buf


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ –∞–±–æ –π–æ–≥–æ —à–∏—Ä–æ—Ç—É —Ç–∞ –¥–æ–≤–≥–æ—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–ö–∏—ó–≤' –∞–±–æ '50.45,30.52'), —ñ —è –Ω–∞–¥–∞–º –≤–∞–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø –º–æ–∂—É –Ω–∞–¥–∞—Ç–∏ –≤–∞–º –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É –∞–±–æ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—ñ. –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '–õ—å–≤—ñ–≤') –∞–±–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, '49.83,24.02').")

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    github_link = "https://github.com/ameloft/weatherbot/tree/main" 
    
    message_text = (
        "–¶–µ–π <a href=\"" + github_link + "\">–±–æ—Ç</a> —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ–≥–æ–¥—É "
        "–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º Open-Meteo API —Ç–∞ Nominatim OpenStreetMap."
    )
    
    await update.message.reply_text(message_text, parse_mode='HTML')

async def send_weather_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ü–æ—Ç–æ—á–Ω–∞ –ø–æ–≥–æ–¥–∞", callback_data="current")],
        [InlineKeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—ñ", callback_data="forecast")],
        # –ö–Ω–æ–ø–∫–∞ "–ü–æ–≥–æ–¥–∏–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑" –∑–Ω–∏–∫–ª–∞, –±–æ —Ç–µ–ø–µ—Ä –≤–æ–Ω–∞ –±—É–¥–µ –≤–∫–ª–∞–¥–µ–Ω–∞ —É –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—ñ
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ü–µ call_query, —â–æ–± –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ (–¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥)
    if update.callback_query:
        await update.callback_query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏:", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –ø–æ–±–∞—á–∏—Ç–∏:", reply_markup=reply_markup)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    lat, lon = None, None

    # –°–ø—Ä–æ–±–∞ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ —è–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
    if "," in text:
        parts = text.split(",")
        if len(parts) == 2:
            try:
                lat = float(parts[0].strip())
                lon = float(parts[1].strip())
                # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω—É –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
                if not (-90 <= lat <= 90 and -180 <= lon <= 180):
                    await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –®–∏—Ä–æ—Ç–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ -90 –¥–æ 90, –¥–æ–≤–≥–æ—Ç–∞ –≤—ñ–¥ -180 –¥–æ 180.")
                    return
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ '—à–∏—Ä–æ—Ç–∞,–¥–æ–≤–≥–æ—Ç–∞'.")
                return
        else:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ '—à–∏—Ä–æ—Ç–∞,–¥–æ–≤–≥–æ—Ç–∞'.")
            return
    
    # –Ø–∫—â–æ —Ü–µ –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞
    if lat is None or lon is None: # –¢—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ —Ä–æ–∑–ø–∞—Ä—Å–∏–ª–∏ —è–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
        lat, lon = get_coordinates(text)
        if lat is None or lon is None:
            await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ç–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

    context.user_data["lat"] = lat
    context.user_data["lon"] = lon
    # –î–æ–¥–∞—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç–∞ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
    context.user_data["city_name"] = text # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞
    await send_weather_menu(update, context)

# –û–ù–û–í–õ–ï–ù–ò–ô button_handler –¥–ª—è –≤–∫–ª–∞–¥–µ–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É –¥–Ω—ñ–≤ —Ç–∞ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    lat = context.user_data.get("lat")
    lon = context.user_data.get("lon")
    if lat is None or lon is None:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –∞–±–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑–Ω–æ–≤—É.")
        return

    query_data = query.data

    if query_data == "current":
        weather_text = get_weather_current(lat, lon)
        map_url = f"https://www.openstreetmap.org/?mlat={lat}&mlon={lon}#map=10/{lat}/{lon}"
        keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ", url=map_url)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(weather_text, reply_markup=reply_markup)

    elif query_data == "forecast":
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç —Ç–∞ –¥–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ 3 –¥–Ω—ñ
        forecast_text, forecast_details = get_weather_forecast(lat, lon)
        context.user_data["forecast_details"] = forecast_details # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–µ—Ç–∞–ª—ñ —É user_data

        if not forecast_details:
            await query.edit_message_text(forecast_text) # –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–µ—Ç–∞–ª–µ–π, –ø—Ä–æ—Å—Ç–æ –≤–∏–≤–æ–¥–∏–º–æ —Ç–µ–∫—Å—Ç
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è
        keyboard = []
        for date_str, details in forecast_details.items():
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É –¥–ª—è –∫–Ω–æ–ø–∫–∏
            date_obj = datetime.datetime.fromisoformat(date_str)
            day_name = date_obj.strftime("%A, %d.%m")
            day_name = day_name.replace("Monday", "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫").replace("Tuesday", "–í—ñ–≤—Ç–æ—Ä–æ–∫").replace("Wednesday", "–°–µ—Ä–µ–¥–∞").replace("Thursday", "–ß–µ—Ç–≤–µ—Ä").replace("Friday", "–ü'—è—Ç–Ω–∏—Ü—è").replace("Saturday", "–°—É–±–æ—Ç–∞").replace("Sunday", "–ù–µ–¥—ñ–ª—è")
            
            keyboard.append([InlineKeyboardButton(f"–ü–æ–≥–æ–¥–∏–Ω–Ω–∏–π –Ω–∞ {day_name}", callback_data=f"hourly_for_day_{date_str}")])
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–≥–æ–¥–∏
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(forecast_text + "\n–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø–æ–≥–æ–¥–∏–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É:", reply_markup=reply_markup)

    elif query_data.startswith("hourly_for_day_"):
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±—Ä–∞–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –ø–æ–≥–æ–¥–∏–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É
        date_str = query_data.replace("hourly_for_day_", "")
        forecast_details = context.user_data.get("forecast_details")

        if not forecast_details or date_str not in forecast_details:
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Ç–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –∑–Ω–æ–≤—É.")
            return

        hourly_data_for_selected_day = forecast_details[date_str]["hourly_data"]
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç —Ç–∞ –¥–∞–Ω—ñ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∞–¥–∞–ø—Ç–æ–≤–∞–Ω–æ—ó get_weather_hourly
        hourly_forecast_text, plot_times, plot_temps, plot_prec_probs = get_weather_hourly(hourly_data_for_selected_day)
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        date_obj = datetime.datetime.fromisoformat(date_str)
        day_name = date_obj.strftime("%A, %d.%m")
        day_name = day_name.replace("Monday", "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫").replace("Tuesday", "–í—ñ–≤—Ç–æ—Ä–æ–∫").replace("Wednesday", "–°–µ—Ä–µ–¥–∞").replace("Thursday", "–ß–µ—Ç–≤–µ—Ä").replace("Friday", "–ü'—è—Ç–Ω–∏—Ü—è").replace("Saturday", "–°—É–±–æ—Ç–∞").replace("Sunday", "–ù–µ–¥—ñ–ª—è")
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑ (—Ä–µ–¥–∞–≥—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–Ω—è)
        await query.edit_message_text(f"–ü–æ–≥–æ–¥–∏–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {day_name}:\n{hourly_forecast_text}")

        # –Ø–∫—â–æ —î –¥–∞–Ω—ñ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞, –≥–µ–Ω–µ—Ä—É—î–º–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –π–æ–≥–æ
        if plot_times and plot_temps and plot_prec_probs:
            await query.message.reply_text("–ì–µ–Ω–µ—Ä—É—é –≥—Ä–∞—Ñ—ñ–∫ –ø–æ–≥–æ–¥–∏–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É...")
            plot_buffer = generate_hourly_weather_plot(plot_times, plot_temps, plot_prec_probs)
            if plot_buffer:
                await query.message.reply_photo(photo=InputFile(plot_buffer), caption=f"–ì—Ä–∞—Ñ—ñ–∫ –ø–æ–≥–æ–¥–∏–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ {day_name}:")
            else:
                await query.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –ø–æ–≥–æ–¥–∏–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É.")
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ" —Ç–∞ "–ù–∞–∑–∞–¥" –æ–∫—Ä–µ–º–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º
        map_url = f"https://www.openstreetmap.org/?mlat={lat}&mlon={lon}#map=10/{lat}/{lon}"
        keyboard = [
            [InlineKeyboardButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–∞ –∫–∞—Ä—Ç—ñ", url=map_url)],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ 3 –¥–Ω—ñ", callback_data="forecast")] # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É –¥–Ω—ñ–≤
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text("–î–æ–¥–∞—Ç–∫–æ–≤–æ:", reply_markup=reply_markup)

    elif query_data == "back_to_main_menu":
        # –ü—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É –ø–æ–≥–æ–¥–∏
        await send_weather_menu(update, context)

    else:
        await query.edit_message_text("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")

# –ù–û–í–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø –°–ü–û–í–Ü–©–ï–ù–¨ (–ü–£–ù–ö–¢ 2)
async def subscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —á–∞—Å –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, /subscribe 08:00). –ú—ñ—Å—Ç–æ –±—É–¥–µ –≤–∑—è—Ç–æ –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Ç—É.")
        
        lat = context.user_data.get("lat")
        lon = context.user_data.get("lon")
        city_name = context.user_data.get("city_name")

        if lat is None or lon is None:
            await update.message.reply_text("–°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –∞–±–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏, –∞ –ø–æ—Ç—ñ–º —Å–ø—Ä–æ–±—É–π—Ç–µ /subscribe.")
            return

        await update.message.reply_text(f"–ü–æ—Ç–æ—á–Ω–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏: {city_name if city_name else f'({lat},{lon})'}")
        return

    time_str = context.args[0]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É —á–∞—Å—É
    try:
        import datetime
        hour, minute = map(int, time_str.split(':'))
        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            raise ValueError
        datetime.time(hour, minute)
    except ValueError:
        await update.message.reply_text("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 08:00).")
        return

    user_id = update.effective_user.id
    lat = context.user_data.get("lat")
    lon = context.user_data.get("lon")
    city_name = context.user_data.get("city_name")

    if lat is None or lon is None:
        await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ –∞–±–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏, —â–æ–± —è –∑–Ω–∞–≤, –¥–ª—è —è–∫–æ–≥–æ –º—ñ—Å—Ü—è –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.")
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É
    user_subscriptions[user_id] = { # –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫, –Ω–µ context.bot_data –Ω–∞–ø—Ä—è–º—É
        "lat": lat,
        "lon": lon,
        "city_name": city_name if city_name else f"({lat},{lon})",
        "notification_time": time_str
    }
    await update.message.reply_text(f"–í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —â–æ–¥–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≥–æ–¥—É –¥–ª—è {user_subscriptions[user_id]['city_name']} –æ {time_str}.")
    logging.info(f"User {user_id} subscribed for {user_subscriptions[user_id]['city_name']} at {time_str}")

async def unsubscribe_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in user_subscriptions:
        del user_subscriptions[user_id]
        await update.message.reply_text("–í–∏ –≤—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –≤—ñ–¥ —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –ø–æ–≥–æ–¥—É.")
        logging.info(f"User {user_id} unsubscribed.")
    else:
        await update.message.reply_text("–í–∏ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.")

async def send_daily_weather_notifications(context: ContextTypes.DEFAULT_TYPE):
    import datetime
    now = datetime.datetime.now().strftime("%H:%M")
    logging.info(f"Running daily notification check at {now}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ –ø—ñ–¥–ø–∏—Å–∫–∏
    for user_id, data in user_subscriptions.items():
        if data.get("notification_time") == now:
            lat, lon = data["lat"], data["lon"]
            city_name = data["city_name"]
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
            weather = get_weather_current(lat, lon) 
            message = f"üîî –©–æ–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {city_name}:\n{weather}"
            try:
                await context.bot.send_message(chat_id=user_id, text=message)
                logging.info(f"Sent notification to user {user_id} for {city_name}")
            except Exception as e:
                logging.error(f"Failed to send notification to user {user_id}: {e}")


# –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ–≥–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è Telegram
async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lat = update.message.location.latitude
    lon = update.message.location.longitude
    context.user_data["lat"] = lat
    context.user_data["lon"] = lon
    context.user_data["city_name"] = f"({lat},{lon})" # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —è–∫ –Ω–∞–∑–≤—É –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
    await update.message.reply_text(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤–∞—à–µ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è: –®–∏—Ä–æ—Ç–∞ {lat}, –î–æ–≤–≥–æ—Ç–∞ {lon}.")
    await send_weather_menu(update, context)

# –ë–ª–æ–∫ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(API_TOKEN).build()

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("about", about))
    app.add_handler(CommandHandler("subscribe", subscribe_command))
    app.add_handler(CommandHandler("unsubscribe", unsubscribe_command))
    
    # –û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–º—ñ—Å—Ç–æ/–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ–≥–æ –º—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è (–≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó)
    app.add_handler(MessageHandler(filters.LOCATION, handle_location))
    # –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å inline-–∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(button_handler))

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è JobQueue –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–ø–æ–≤—ñ—â–µ–Ω—å (–¥–ª—è –ø—É–Ω–∫—Ç—É 2)
    job_queue = app.job_queue
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é send_daily_weather_notifications –∫–æ–∂–Ω—ñ 60 —Å–µ–∫—É–Ω–¥.
    # first=0 –æ–∑–Ω–∞—á–∞—î, —â–æ –ø–µ—Ä—à–∏–π –∑–∞–ø—É—Å–∫ –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –Ω–µ–≥–∞–π–Ω–æ.
    job_queue.run_repeating(send_daily_weather_notifications, interval=60, first=0)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π...")
    app.run_polling()
